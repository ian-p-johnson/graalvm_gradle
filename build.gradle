plugins {
    id 'java'
    id 'application'
    id 'org.graalvm.buildtools.native' version '0.9.23'
}

mainClassName = 'org.example.Main'

group = 'org.example'
version = '1.0-SNAPSHOT'

//ext {
//    launcherClassName = "io.vertx.core.Launcher"
//}

repositories {
    mavenCentral()
}

graalvmNative {

    agent {
//        defaultMode = "standard" // Default agent mode if one isn't specified using `-Pagent=mode_name`
        enabled = true // Enables the agent
//
//        modes {
//            // The standard agent mode generates metadata without conditions.
//            standard {
//            }
//            // The conditional agent mode generates metadata with conditions.
//            conditional {
//                userCodeFilterPath = "path-to-filter.json" // Path to a filter file that determines classes which will be used in the metadata conditions.
//                extraFilterPath = "path-to-another-filter.json" // Optional, extra filter used to further filter the collected metadata.
//            }
//            // The direct agent mode allows users to directly pass options to the agent.
//            direct {
//                // {output_dir} is a special string expanded by the plugin to where the agent files would usually be output.
//                options.add("config-output-dir={output_dir}")
//                options.add("experimental-configuration-with-origins")
//            }
//        }
//
//        callerFilterFiles.from("filter.json")
//        accessFilterFiles.from("filter.json")
//        builtinCallerFilter = true
//        builtinHeuristicFilter = true
//        enableExperimentalPredefinedClasses = false
//        enableExperimentalUnsafeAllocationTracing = false

        //trackReflectionMetadata = true

//
//        // Copies metadata collected from tasks into the specified directories.
//        metadataCopy {
//            inputTaskNames.add("test") // Tasks previously executed with the agent attached.
//            outputDirectories.add("src/main/resources/META-INF/native-image")
//            mergeWithExisting = true // Instead of copying, merge with existing metadata in the output directories.
//        }
//
//        /*
//        By default, if `-Pagent` is specified, all tasks that extend JavaForkOptions are instrumented.
//        This can be limited to only specific tasks that match this predicate.
//         */
//        tasksToInstrumentPredicate = t -> true
    }

    binaries {
        main {
            // Main options
//            imageName = 'application' // The name of the native image, defaults to the project name
            mainClass = 'io.vertx.core.Launcher' // The main class to use, defaults to the application.mainClass
//            debug = true // Determines if debug info should be generated, defaults to false (alternatively add --debug-native to the CLI)
//            verbose = true // Add verbose output, defaults to false
//            fallback = true // Sets the fallback mode of native-image, defaults to false
//            sharedLibrary = false // Determines if image is a shared library, defaults to false if `java-library` plugin isn't included
//            quickBuild = false // Determines if image is being built in quick build mode (alternatively use GRAALVM_QUICK_BUILD environment variable, or add --native-quick-build to the CLI)
//            richOutput = false // Determines if native-image building should be done with rich output
//            requiredVersion = '22.3' // The minimal GraalVM version, can be `MAJOR`, `MAJOR.MINOR` or `MAJOR.MINOR.PATCH`

//            systemProperties = [name1: 'value1', name2: 'value2'] // Sets the system properties to use for the native image builder
//            configurationFileDirectories.from(file('src/my-config')) // Adds a native image configuration file directory, containing files like reflection configuration
//            excludeConfig.put("org.example.test:artifact:version", ["^/META-INF/native-image/.*", "^/config/.*"]) // Excludes configuration that matches one of given regexes from JAR of dependency with said coordinates.
//            excludeConfig.put(file("path/to/artifact.jar"), listOf("^/META-INF/native-image/.*", "^/config/.*"))

            // Advanced options
//            reflection_config.json
//            buildArgs.add('-H:Extra') // Passes '-H:Extra' to the native image builder options. This can be used to pass parameters which are not directly supported by this extension
//            jvmArgs.add('flag') // Passes 'flag' directly to the JVM running the native image builder

            buildArgs.add('-H:ReflectionConfigurationFiles=/home/ianj/dev/coinstrats/graalvm_gradle/META-INF/native-image/reflect-config.json') // Passes '-H:Extra' to the native image builder options. This can be used to pass parameters which are not directly supported by this extension
            //buildArgs.add('-H:+AddAllCharsets')

            // Runtime options

            runtimeArgs.add('run org.example.MainVerticle')
//            runtimeArgs.add('--help') // Passes '--help' to built image, during "nativeRun" task
//            useFatJar = true // Instead of passing each jar individually, builds a fat jar

//            buildArgs.add('--report-unsupported-elements-at-runtime')

//            buildArgs.add('--initialize-at-run-time=io.netty.util.internal.logging.Log4J2Logger')

//            buildArgs.add('--initialize-at-run-time=io.netty.channel.nio.AbstractNioChannel')
//            buildArgs.add('--initialize-at-run-time=io.netty.channel.socket.nio.SelectorProviderUtil')
//            buildArgs.add('--initialize-at-run-time=io.netty.util.concurrent.DefaultPromise')
//            buildArgs.add('--initialize-at-run-time=io.netty.util.internal.PlatformDependent')
//            buildArgs.add('--initialize-at-run-time=io.netty.util.internal.PlatformDependent0')
//            buildArgs.add('--initialize-at-run-time=io.netty.util.internal.SystemPropertyUtil')
//            buildArgs.add('--initialize-at-run-time=io.netty.util.concurrent.FastThreadLocalThread')
//            buildArgs.add('--initialize-at-run-time=io.netty.channel.ChannelHandlerMask')
//
//            buildArgs.add('--trace-object-instantiation=io.netty.util.internal.logging.Log4J2Logger')
//            buildArgs.add('--trace-object-instantiation=org.slf4j.LoggerFactory,org.apache.logging.log4j.message.ReusableMessageFactory,org.apache.logging.log4j.util.PropertiesUtil,org.apache.logging.log4j.LogManager,org.apache.logging.log4j.util.OsgiServiceLocator,org.apache.logging.log4j.spi.LoggerRegistry,org.apache.logging.log4j.Level,org.apache.logging.log4j.spi.ThreadContextMapFactory,org.apache.logging.log4j.spi.AbstractLogger,org.apache.logging.log4j.util.ProviderUtil,org.apache.logging.log4j.util.Constants,org.apache.logging.log4j.simple.SimpleLogger,io.netty.util.internal.PlatformDependent0,org.apache.logging.log4j.spi.StandardLevel,io.netty.util.internal.logging.Log4J2Logger,org.apache.logging.log4j.spi.ExtendedLoggerWrapper,org.apache.logging.log4j.util.LoaderUtil,org.apache.logging.log4j.util.StackLocator,org.apache.logging.log4j.ThreadContext,org.apache.logging.log4j.spi.CopyOnWriteSortedArrayThreadContextMap,org.apache.logging.log4j.util.StackLocatorUtil,org.apache.logging.log4j.status.StatusLogger,org.apache.logging.log4j.util.PropertySource$Util,org.apache.logging.log4j.spi.GarbageFreeSortedArrayThreadContextMap,org.apache.logging.log4j.spi.DefaultThreadContextStack,org.apache.logging.log4j.spi.Provider,org.apache.logging.log4j.util.SortedArrayStringMap,io.netty.util.internal.PlatformDependent,org.apache.logging.log4j.spi.DefaultThreadContextMap,org.apache.logging.log4j.util.Strings,io.netty.util.internal.SystemPropertyUtil')
//            buildArgs.add('--trace-object-instantiation=org.apache.logging.log4j.util.PropertiesUtil,org.apache.logging.log4j.message.ReusableMessageFactory,org.apache.logging.log4j.spi.Provider,org.apache.logging.log4j.util.ProviderUtil,org.apache.logging.log4j.util.OsgiServiceLocator,org.apache.logging.log4j.ThreadContext,org.apache.logging.log4j.spi.DefaultThreadContextMap,org.apache.logging.log4j.status.StatusLogger,org.apache.logging.log4j.util.StackLocatorUtil,io.netty.util.internal.PlatformDependent,org.apache.logging.log4j.spi.ExtendedLoggerWrapper,org.apache.logging.log4j.spi.CopyOnWriteSortedArrayThreadContextMap,org.apache.logging.log4j.spi.DefaultThreadContextStack,org.apache.logging.log4j.spi.StandardLevel,org.apache.logging.log4j.spi.AbstractLogger,io.netty.util.internal.PlatformDependent0,org.apache.logging.log4j.util.Strings,org.apache.logging.log4j.util.StackLocator,io.netty.util.internal.logging.Log4J2Logger,org.apache.logging.log4j.spi.ThreadContextMapFactory,org.apache.logging.log4j.util.Constants,org.apache.logging.log4j.util.PropertySource$Util,io.netty.util.internal.SystemPropertyUtil,org.apache.logging.log4j.Level,org.apache.logging.log4j.simple.SimpleLogger,org.apache.logging.log4j.spi.GarbageFreeSortedArrayThreadContextMap,org.apache.logging.log4j.util.LoaderUtil,org.apache.logging.log4j.util.SortedArrayStringMap,org.apache.logging.log4j.LogManager,org.slf4j.LoggerFactory,org.apache.logging.log4j.spi.LoggerRegistry')

            buildArgs.add('--initialize-at-run-time=io.netty')
            buildArgs.add('--initialize-at-run-time=org.jcodings.spi.Charsets')
            //buildArgs.add('--initialize-at-run-time=org.jcodings')
            //buildArgs.add('--initialize-at-run-time=com.sun.org.apache.xml.internal.serializer.Encodings')

//            buildArgs.add('--initialize-at-run-time=org.apache.logging.log4j.spi.Provider')
//            buildArgs.add('--trace-class-initialization=org.jcodings.spi.Charsets')
//            ERROR StatusLogger Unable to load services for service class org.apache.logging.log4j.spi.Provider
//            java.lang.InternalError: com.oracle.svm.core.jdk.UnsupportedFeatureError: Defining hidden classes at runtime is not supported.

        }
    }
}

dependencies {
    // Vertx
    implementation group: 'io.vertx', name: 'vertx-core', version: '4.4.3'
    implementation group: 'io.vertx', name: 'vertx-web', version: '4.4.3'
    implementation group: 'io.vertx', name: 'vertx-web-api-contract', version: '4.4.3'
    implementation group: 'io.vertx', name: 'vertx-config', version: '4.4.3'
    implementation group: 'io.vertx', name: 'vertx-web-client', version: '4.4.3'
    implementation group: 'io.vertx', name: 'vertx-circuit-breaker', version: '4.4.3'
    // Jackson
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.15.2'
    // CLI
    implementation group: 'commons-cli', name: 'commons-cli', version: '1.5.0'
    implementation group: 'commons-codec', name: 'commons-codec', version: '1.15'
    implementation group: 'org.apache.commons', name: 'commons-collections4', version: '4.4'
    // GraphQL
    implementation group: 'com.graphql-java', name: 'graphql-java', version: '20.4'
    implementation group: 'io.github.kobylynskyi', name: 'graphql-java-codegen', version: '5.7.2'
    implementation group: 'javax.validation', name: 'validation-api', version: '2.0.1.Final'
    // Telemetry
    implementation group: 'io.opentelemetry', name: 'opentelemetry-api', version: '1.27.0'
    implementation group: 'io.opentelemetry', name: 'opentelemetry-context', version: '1.27.0'
    implementation group: 'io.opentelemetry', name: 'opentelemetry-exporter-jaeger', version: '1.27.0'
    implementation group: 'io.vertx', name: 'vertx-opentelemetry', version: '4.4.3'
    // Micrometer / Prometheus
    implementation group: 'io.prometheus', name: 'simpleclient', version: '0.16.0'
    implementation group: 'io.micrometer', name: 'micrometer-registry-prometheus', version: '1.11.1'
    implementation group: 'io.vertx', name: 'vertx-micrometer-metrics', version: '4.4.3'
    // TOML
    implementation group: 'com.moandjiezana.toml', name: 'toml4j', version: '0.7.2'
    // Logging
    //implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.20.0'
    testImplementation group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: '2.20.0'
    // async logger
    implementation group: 'com.lmax', name: 'disruptor', version: '4.0.0.RC1'
    implementation group: 'org.slf4j', name: 'slf4j-api', version: '2.0.7'
    testImplementation group: 'org.slf4j', name: 'slf4j-simple', version: '2.0.7'

    // GraalVM - reflection
    implementation group: 'net.jpountz.lz4', name: 'lz4', version: '1.3.0'
    implementation group: 'org.jboss.marshalling', name: 'jboss-marshalling', version: '2.1.1.Final'
    implementation group: 'com.google.protobuf', name: 'protobuf-java', version: '4.0.0-rc-2'

    testImplementation platform('org.junit:junit-bom:5.9.1')
    testImplementation 'org.junit.jupiter:junit-jupiter'
}

test {
    useJUnitPlatform()
}

jar {
    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
    manifest {
        attributes "Main-Class": "org.example.Main"
    }
   from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}